apiVersion: v1
kind: Secret
metadata:
  name: ecr-registry-helper-secrets
  namespace: ${svc_name}
stringData:
  AWS_SECRET_ACCESS_KEY: "lXsHOcmDaE/em3/F1yBcw9aNI6UvGmqzA34rxmsL"
  AWS_ACCESS_KEY_ID: "AKIA5O4QXKW7TUWAX7RU"
  AWS_ACCOUNT: "925332100543"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecr-registry-helper-cm
  namespace: ${svc_name}
data:
  AWS_REGION: "ap-south-1"
  DOCKER_SECRET_NAME: ecr-login
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ecr-login
  namespace: ${svc_name}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: ${svc_name}
  name: role-full-access-to-secrets
rules:
- apiGroups: [""]
  resources: ["secrets"]
  resourceNames: ["ecr-login"] # Replace with your desired ECR token secret name
  verbs: ["delete"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-role-binding
  namespace: ${svc_name}
subjects:
- kind: ServiceAccount
  name: ecr-login # Replace with your service account name if different
  namespace: ${svc_name}
  apiGroup: ""
roleRef:
  kind: Role
  name: role-full-access-to-secrets # Replace with your role name if different 
  apiGroup: ""
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: ecr-registry-helper
  namespace: ${svc_name}
spec:
  schedule: "0 */10 * * *" # Replace with your desired schedule
  #schedule: "* * * * *"
  successfulJobsHistoryLimit: 2
  suspend: false
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: ecr-login # Replace with your service account name if different
          containers:
          - name: ecr-registry-helper
            image: omarxs/awskctl:v1.0
            imagePullPolicy: IfNotPresent
            envFrom:
            - secretRef:
                name: ecr-registry-helper-secrets # Replace with your secret name if different
            - configMapRef:
                name: ecr-registry-helper-cm # Replace with your configmap name if different
            command:
            - /bin/bash
            - -c
            - |-
              ECR_TOKEN="$(aws ecr get-login-password --region $${AWS_REGION})"
              NAMESPACE_NAME=${svc_name} # Replace with your desired namespace
              kubectl delete secret --ignore-not-found $DOCKER_SECRET_NAME -n $NAMESPACE_NAME
              kubectl create secret docker-registry $DOCKER_SECRET_NAME --docker-server=https://$${AWS_ACCOUNT}.dkr.ecr.$${AWS_REGION}.amazonaws.com --docker-username=AWS --docker-password=$${ECR_TOKEN} --namespace=$NAMESPACE_NAME
              echo "Secret was successfully updated at $(date)"
          restartPolicy: Never
---
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: api.ecr.ap-south-1.amazonaws.com
  namespace: ${svc_name}
spec:
  hosts:
  - api.ecr.ap-south-1.amazonaws.com
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  location: MESH_EXTERNAL
  resolution: DNS
---